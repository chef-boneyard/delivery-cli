#!/bin/bash
# A wrapper for system git that prevents commands such as `push` to be
# executed in testing. It logs commands to "~/.history" so afterwards it can be
# asserted that they ran.
#
# Shamelessly stolen from https://github.com/github/hub
command="$1"
[ "$command" = "config" ] || echo git "$@" >> "$FAKE_BINS_HISTORY_FILE"

set -e
features_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )
tmp_dir=$features_dir/tmp
mkdir -p $tmp_dir

upper_command=$(echo "$command" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
eval mocked_var_reference="${upper_command}_MOCKED"
if [[ $MOCK_ALL_BASH = true ]] || [[ ${!mocked_var_reference} = true ]]; then
    echo "Skipping mocked git call: $command"
else
    case "$command" in
	"clone" )
            repo_dir=$3
            mkdir -p $repo_dir
            cd $repo_dir

            if [ "x$REPO_TO_COPY" == "x" ]; then
              REPO_TO_COPY="minimal"
            fi

            cp -r "$GIT_CLONE_FIXTURE_REPOS_DIR/$REPO_TO_COPY/." .
	          $DELIVERY_SYSTEM_GIT init
	          $DELIVERY_SYSTEM_GIT add .
	          $DELIVERY_SYSTEM_GIT commit -a -m "commit copied repo"
	    ;;
        "ls-remote" )
            echo "0dcf7e5cadbb945ecaa0fc470ba127e7fadac971	refs/heads/feature-branch"
	    ;;
	# there are some commands we don't want to run
	"push" )
	    ;;
	"pull" )
	    ;;
	"fetch" )
	    ;;
	* )
	    $DELIVERY_SYSTEM_GIT "$@"
	    ;;
    esac
fi
